# -*- coding: utf-8 -*-
"""image_prediction_using_pretrained_models-v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1To_fr6mVTD_nO0Xm9IJyLQmbH1eOQrdC

## Using pretrained models 
- Keras Applications provided deep learning models with pre-trained weights
- Documentation: https://keras.io/applications/
"""

from google.colab import drive
drive.mount('/content/drive/')

import numpy as np

from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
from keras.applications.resnet50 import preprocess_input, decode_predictions

"""### Load image
- Images can be loaded using load_img function
"""

img_src = '/content/drive/My Drive/Colab Notebooks/data/image/dog.jpg'
img = load_img(img_src)

img

"""### Import model
- Currently, seven models are supported
    - Xception
    - VGG16
    - VGG19
    - ResNet50
    - InceptionV3
    - InceptionResNetV2
    - MobileNet
"""

from keras.applications.resnet50 import ResNet50

model_resnet50 = ResNet50()

img_resnet50_pth = '/content/drive/My Drive/Colab Notebooks/data/image/cat.jpg'
img_resnet50 = load_img(img_resnet50_pth, target_size = (224, 224))    # image size can be calibrated with target_size parameter
img_resnet50

img_resnet50 = img_to_array(img_resnet50)
print(img_resnet50.shape)

img_resnet50 = np.expand_dims(img_resnet50, axis=0)
print(img_resnet50.shape)

img_resnet50 = preprocess_input(img_resnet50)    # preprocess image with preprocess_input function
print(img_resnet50.shape)

## prediction with preprocessing
pred_resnet50 = model_resnet50.predict(img_resnet50)
# print(pred_class)

n = 10
top_n_resnet50 = decode_predictions(pred_resnet50, top=n)

for a in top_n_resnet50[0]:
    print(a)

#2
#USING MOBILENET MODEL

from keras.applications.mobilenet import MobileNet

model_mobilenet = MobileNet()

img_mobilenet_pth = '/content/drive/My Drive/Colab Notebooks/data/image/cat.jpg'
img_mobilenet = load_img(img_mobilenet_pth, target_size = (224, 224))    # image size can be calibrated with target_size parameter
img_mobilenet

img_mobilenet = img_to_array(img_mobilenet)
print(img_mobilenet.shape)

img_mobilenet = np.expand_dims(img_mobilenet, axis=0)
print(img_mobilenet.shape)

img_mobilenet = preprocess_input(img_mobilenet)    # preprocess image with preprocess_input function
print(img_mobilenet.shape)

## prediction with preprocessing
pred_mobilenet = model_mobilenet.predict(img_mobilenet)
# print(pred_class)

n = 10
top_n_mobilenet = decode_predictions(pred_mobilenet, top=n)

for b in top_n_mobilenet[0]:
    print(b)

##4
#using VGG16 MODEL

from keras.applications.vgg16 import VGG16
model_vgg16 = VGG16()

#load image
img_vgg16_pth = '/content/drive/My Drive/Colab Notebooks/data/image/cat.jpg'
img_vgg16 = load_img(img_vgg16_pth, target_size = (224, 224))    # image size can be calibrated with target_size parameter
img_vgg16

#convert img to array
img_vgg16 = img_to_array(img_vgg16)
print(img_vgg16.shape)

#expand dimensions of converted image
img_vgg16 = np.expand_dims(img_vgg16, axis=0)
print(img_vgg16.shape)

img_vgg16 = preprocess_input(img_vgg16)    # preprocess image with preprocess_input function
print(img_vgg16.shape)

## prediction with preprocessing
pred_vgg16= model_vgg16.predict(img_vgg16)
# print(pred_vgg16)

n = 10
vgg16_top_n = decode_predictions(pred_vgg16, top=n)

for d in vgg16_top_n[0]:
    print(d)


"""

#similar ways we can predict image using below pretrained model
Xception
VGG19
InceptionV3
InceptionResNetV2

#best model in terms of prediction and accuracy
ResNet50
VGG16
MobileNet

"""
